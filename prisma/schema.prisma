// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(uuid())
  name  String
  email String @unique

  emailVerified Boolean
  image         String?

  createdAt DateTime
  updatedAt DateTime

  sessions Session[]
  accounts Account[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@map("users")
}

model Session {
  id String @id @default(uuid())

  expiresAt DateTime
  token     String   @unique

  createdAt DateTime
  updatedAt DateTime

  ipAddress String?

  userAgent String?
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@map("sessions")
}

model Account {
  id String @id @default(uuid())

  accountId  String
  providerId String
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("accounts")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verifications")
}

model Event {
  id          String   @id @default(uuid())
  name        String
  description String?
  ticketType EventTicketType @default(SINGLE_NUMERATION)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("events")
}

enum EventTicketType {
  SINGLE_NUMERATION
  MULTIPLE_NUMERATIONS
}